const fs = require("fs");
const FormData = require("form-data");
const fetch = (...args) =>
  import("node-fetch").then(({ default: fetch }) => fetch(...args));

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
const API_BASE = "http://localhost:3002/api/v1";
const FRONTEND_BASE = "http://localhost:3001/api/v1";
const TOKEN =
  "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwibmFtZSI6IkFkbWluIiwiZW1haWwiOiJhZG1pbkBleGFtcGxlLmNvbSIsInBhc3N3b3JkIjpudWxsLCJpYXQiOjE3NjA3Njg4MDUsImV4cCI6MTc2MDg1NTIwNX0.ABFmSyJUSClxbmfgKKUT0RDm4WHPwx9OkKnNxca9HnE";

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ
async function uploadPhoto(filePath, title, description) {
  try {
    console.log(`üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ: ${title} - ${description}`);
    console.log(`üìÅ –§–∞–π–ª: ${filePath}`);

    const form = new FormData();
    form.append("file", fs.createReadStream(filePath));
    form.append("albumId", "2");
    form.append("title", title);
    form.append("description", description);

    const response = await fetch(`${API_BASE}/upload/photo`, {
      method: "POST",
      headers: {
        Authorization: `Bearer ${TOKEN}`,
        ...form.getHeaders(),
      },
      body: form,
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`HTTP ${response.status}: ${errorText}`);
    }

    const result = await response.json();
    console.log(`‚úÖ –£—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: ID ${result.id}`);
    return result;
  } catch (error) {
    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ${title}:`, error.message);
    throw error;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ä–∏
async function createPair(albumId, beforePhotoId, afterPhotoId, label) {
  try {
    console.log(`üîÑ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ä–∏: ${beforePhotoId} ‚Üí ${afterPhotoId}`);

    const response = await fetch(`${API_BASE}/gallery/pairs`, {
      method: "POST",
      headers: {
        Authorization: `Bearer ${TOKEN}`,
        "Content-Type": "application/json",
      },
      body: JSON.stringify({
        albumId: parseInt(albumId),
        beforePhotoId: parseInt(beforePhotoId),
        afterPhotoId: parseInt(afterPhotoId),
        label: label,
      }),
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`HTTP ${response.status}: ${errorText}`);
    }

    const result = await response.json();
    console.log(`‚úÖ –ü–∞—Ä—É —Å—Ç–≤–æ—Ä–µ–Ω–æ: ID ${result.id}`);
    return result;
  } catch (error) {
    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ä–∏:`, error.message);
    throw error;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ä –∑ 6 —Ñ–æ—Ç–æ
async function testPairCreation() {
  console.log("üöÄ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ä –∑ 6 —Ñ–æ—Ç–æ...\n");

  const beforeFiles = ["before1.png", "before2.png", "before3.png"];
  const afterFiles = ["after1.png", "after2.png", "after3.png"];

  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ñ–∞–π–ª—ñ–≤
    const allFiles = [...beforeFiles, ...afterFiles];
    for (const file of allFiles) {
      if (!fs.existsSync(file)) {
        throw new Error(`–§–∞–π–ª ${file} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
      }
    }

    console.log("üì∏ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è 3 —Ñ–æ—Ç–æ '–î–æ'...");
    const beforePhotos = [];
    for (let i = 0; i < beforeFiles.length; i++) {
      const photo = await uploadPhoto(
        beforeFiles[i],
        "–î–æ",
        `–§–æ—Ç–æ –¥–æ - ${i + 1}`
      );
      beforePhotos.push(photo);
    }

    console.log("\nüì∏ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è 3 —Ñ–æ—Ç–æ '–ü—ñ—Å–ª—è'...");
    const afterPhotos = [];
    for (let i = 0; i < afterFiles.length; i++) {
      const photo = await uploadPhoto(
        afterFiles[i],
        "–ü—ñ—Å–ª—è",
        `–§–æ—Ç–æ –ø—ñ—Å–ª—è - ${i + 1}`
      );
      afterPhotos.push(photo);
    }

    console.log("\nüë• –°—Ç–≤–æ—Ä–µ–Ω–Ω—è 3 –ø–∞—Ä...");
    const pairs = [];
    for (let i = 0; i < 3; i++) {
      const pair = await createPair(
        2, // albumId
        beforePhotos[i].id,
        afterPhotos[i].id,
        `–¢–µ—Å—Ç–æ–≤–∞ –ø–∞—Ä–∞ ${i + 1}`
      );
      pairs.push(pair);
    }

    console.log("\nüéâ –í—Å—ñ 6 —Ñ–æ—Ç–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —ñ 3 –ø–∞—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–æ!");
    console.log("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏:");
    console.log("–§–æ—Ç–æ '–î–æ':");
    beforePhotos.forEach((photo, i) => {
      console.log(`  ${i + 1}. ID: ${photo.id}, URL: ${photo.url}`);
    });
    console.log("\n–§–æ—Ç–æ '–ü—ñ—Å–ª—è':");
    afterPhotos.forEach((photo, i) => {
      console.log(`  ${i + 1}. ID: ${photo.id}, URL: ${photo.url}`);
    });
    console.log("\n–ü–∞—Ä–∏:");
    pairs.forEach((pair, i) => {
      console.log(
        `  ${i + 1}. ID: ${pair.id}, –ü–∞—Ä–∞: ${pair.beforePhotoId} ‚Üí ${
          pair.afterPhotoId
        }`
      );
    });
  } catch (error) {
    console.error("\n‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:", error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  testPairCreation().catch(console.error);
}

module.exports = { uploadPhoto, createPair, testPairCreation };

