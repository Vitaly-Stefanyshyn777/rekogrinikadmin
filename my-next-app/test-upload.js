const fs = require("fs");
const FormData = require("form-data");
const fetch = (...args) =>
  import("node-fetch").then(({ default: fetch }) => fetch(...args));

// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
const API_BASE = "http://localhost:3002/api/v1";
const FRONTEND_BASE = "http://localhost:3001/api/v1";

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ
async function uploadPhoto(filePath, title, description, useFrontend = false) {
  const baseUrl = useFrontend ? FRONTEND_BASE : API_BASE;

  try {
    console.log(`üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ: ${title} - ${description}`);
    console.log(`üìÅ –§–∞–π–ª: ${filePath}`);
    console.log(`üåê URL: ${baseUrl}/upload/photo`);

    const form = new FormData();
    form.append("file", fs.createReadStream(filePath));
    form.append("albumId", "2"); // ID –∞–ª—å–±–æ–º—É "–î–æ/–ü—ñ—Å–ª—è"
    form.append("title", title);
    form.append("description", description);

    const response = await fetch(`${baseUrl}/upload/photo`, {
      method: "POST",
      body: form,
      headers: {
        ...form.getHeaders(),
      },
    });

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`HTTP ${response.status}: ${errorText}`);
    }

    const result = await response.json();
    console.log(`‚úÖ –£—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ: ${result.url}`);
    return result;
  } catch (error) {
    console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ${title}:`, error.message);
    throw error;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ñ–æ—Ç–æ
async function testUploadAll() {
  console.log("üöÄ –ü–æ—á–∞—Ç–æ–∫ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è 6 —Ñ–æ—Ç–æ...\n");

  const beforeFiles = ["before1.png", "before2.png", "before3.png"];
  const afterFiles = ["after1.png", "after2.png", "after3.png"];

  try {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ñ–∞–π–ª—ñ–≤
    const allFiles = [...beforeFiles, ...afterFiles];
    for (const file of allFiles) {
      if (!fs.existsSync(file)) {
        throw new Error(`–§–∞–π–ª ${file} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
      }
    }

    console.log('üì∏ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è 3 —Ñ–æ—Ç–æ "–î–æ"...');
    const beforePhotos = [];
    for (let i = 0; i < beforeFiles.length; i++) {
      const photo = await uploadPhoto(
        beforeFiles[i],
        "–î–æ",
        `–§–æ—Ç–æ –¥–æ - ${i + 1}`,
        true // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –ø—Ä–æ–∫—Å—ñ
      );
      beforePhotos.push(photo);
    }

    console.log('\nüì∏ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è 3 —Ñ–æ—Ç–æ "–ü—ñ—Å–ª—è"...');
    const afterPhotos = [];
    for (let i = 0; i < afterFiles.length; i++) {
      const photo = await uploadPhoto(
        afterFiles[i],
        "–ü—ñ—Å–ª—è",
        `–§–æ—Ç–æ –ø—ñ—Å–ª—è - ${i + 1}`,
        true // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –ø—Ä–æ–∫—Å—ñ
      );
      afterPhotos.push(photo);
    }

    console.log("\nüéâ –í—Å—ñ 6 —Ñ–æ—Ç–æ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!");
    console.log("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç–∏:");
    console.log('–§–æ—Ç–æ "–î–æ":');
    beforePhotos.forEach((photo, i) => {
      console.log(`  ${i + 1}. ${photo.url}`);
    });
    console.log('\n–§–æ—Ç–æ "–ü—ñ—Å–ª—è":');
    afterPhotos.forEach((photo, i) => {
      console.log(`  ${i + 1}. ${photo.url}`);
    });

    // –¢—É—Ç –º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –ª–æ–≥—ñ–∫—É —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ä
    console.log(
      "\nüí° –ù–∞—Å—Ç—É–ø–Ω–∏–π –∫—Ä–æ–∫: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ä –∑ —Ü–∏—Ö —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å"
    );
  } catch (error) {
    console.error("\n‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:", error.message);
    process.exit(1);
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ
async function testSingleUpload() {
  console.log("üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –æ–¥–Ω–æ–≥–æ —Ñ–æ—Ç–æ...\n");

  try {
    const photo = await uploadPhoto(
      "before1.png",
      "–¢–µ—Å—Ç",
      "–¢–µ—Å—Ç–æ–≤–µ —Ñ–æ—Ç–æ",
      true // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –ø—Ä–æ–∫—Å—ñ
    );

    console.log("‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π—à–æ–≤ —É—Å–ø—ñ—à–Ω–æ!");
    console.log(`üì∏ URL: ${photo.url}`);
  } catch (error) {
    console.error("‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π—à–æ–≤:", error.message);
  }
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async function main() {
  const args = process.argv.slice(2);

  if (args.includes("--single")) {
    await testSingleUpload();
  } else {
    await testUploadAll();
  }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  main().catch(console.error);
}

module.exports = { uploadPhoto, testUploadAll, testSingleUpload };
