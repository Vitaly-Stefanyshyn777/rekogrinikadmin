"use client";

import React, { useState, useEffect } from "react";
import { useAuth } from "@/contexts/AuthContext";
import { useRouter } from "next/navigation";
import { Button } from "@/components/ui/Button";
import { Input } from "@/components/ui/Input";
import { galleryApi, Album, BeforeAfterPair } from "@/lib/api";
import { Photo } from "../../../../shared-types";
import { GroupedPhotos } from "@/components/GroupedPhotos";
import {
  Plus,
  Upload,
  Trash2,
  ArrowRight,
  Image as ImageIcon,
  Grid,
  List,
} from "lucide-react";
import toast from "react-hot-toast";

export default function BeforeAfterPage() {
  const { user, isAuthenticated, loading, token } = useAuth();
  const router = useRouter();
  const [albums, setAlbums] = useState<Album[]>([]);
  const [selectedAlbum, setSelectedAlbum] = useState<Album | null>(null);
  const [photos, setPhotos] = useState<Photo[]>([]);
  const [pairs, setPairs] = useState<BeforeAfterPair[]>([]);
  const [loadingAlbums, setLoadingAlbums] = useState(true);
  const [loadingPhotos, setLoadingPhotos] = useState(false);
  const [showAddAlbum, setShowAddAlbum] = useState(false);
  const [showAddPhoto, setShowAddPhoto] = useState(false);
  const [showAddPair, setShowAddPair] = useState(false);
  const [uploadingPair, setUploadingPair] = useState(false);

  // –°—Ç–∞–Ω –¥–ª—è 6 —Ñ–æ—Ç–æ (3 –î–û + 3 –ü–Ü–°–õ–Ø)
  const [beforePhotos, setBeforePhotos] = useState<Photo[]>([]);
  const [afterPhotos, setAfterPhotos] = useState<Photo[]>([]);
  const [uploading, setUploading] = useState<boolean[]>(
    new Array(6).fill(false)
  );

  // –°—Ç–∞–Ω –¥–ª—è –≥—Ä—É–ø—É–≤–∞–Ω–Ω—è
  const [groupBy, setGroupBy] = useState<"tag" | "pair">("tag");
  const [viewMode, setViewMode] = useState<"grid" | "list">("grid");

  useEffect(() => {
    if (!loading && !isAuthenticated) {
      router.push("/login");
    }
  }, [isAuthenticated, loading, router]);

  useEffect(() => {
    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∞–ª—å–±–æ–º–∏ —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —î –≤–∞–ª—ñ–¥–Ω–∏–π —Ç–æ–∫–µ–Ω
    if (token && token !== "undefined" && token !== "null") {
      console.log("–ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è, –ø–æ—á–∏–Ω–∞—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–ª—å–±–æ–º—ñ–≤");
      loadAlbums();
    } else {
      console.log("–¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π, –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–ª—å–±–æ–º—ñ–≤");
    }
  }, [token]);

  useEffect(() => {
    if (selectedAlbum) {
      loadPhotos(selectedAlbum.id.toString());
      loadPairs(selectedAlbum.id.toString());
    }
  }, [selectedAlbum]);

  const loadAlbums = async () => {
    try {
      setLoadingAlbums(true);
      console.log("–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–ª—å–±–æ–º—ñ–≤...");
      console.log("üîë –¢–æ–∫–µ–Ω –¥–ª—è –∑–∞–ø–∏—Ç—É:", token);

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ç–æ–∫–µ–Ω –≤–∞–ª—ñ–¥–Ω–∏–π
      if (!token || token === "undefined" || token === "null") {
        throw new Error("–¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π");
      }

      const response = await fetch("/api/v1/gallery/albums", {
        method: "GET",
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–ª—å–±–æ–º—ñ–≤");
      }

      const albumsData = await response.json();
      console.log("–í—ñ–¥–ø–æ–≤—ñ–¥—å API:", albumsData);
      const beforeAfterAlbums = albumsData.filter(
        (album: any) => album.type === "BEFORE_AFTER"
      );
      console.log("–§—ñ–ª—å—Ç—Ä–æ–≤–∞–Ω—ñ –∞–ª—å–±–æ–º–∏:", beforeAfterAlbums);
      setAlbums(beforeAfterAlbums);
      if (beforeAfterAlbums.length > 0 && !selectedAlbum) {
        setSelectedAlbum(beforeAfterAlbums[0]);
        console.log("–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –≤–∏–±—Ä–∞–Ω–∏–π –∞–ª—å–±–æ–º:", beforeAfterAlbums[0]);
      }
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–ª—å–±–æ–º—ñ–≤:", error);
      toast.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–ª—å–±–æ–º—ñ–≤");
    } finally {
      setLoadingAlbums(false);
    }
  };

  const loadPhotos = async (albumId: string) => {
    try {
      setLoadingPhotos(true);
      const response = await fetch(`/api/v1/gallery/albums/${albumId}/photos`, {
        method: "GET",
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ");
      }

      const photosData = await response.json();
      setPhotos(photosData);
    } catch (error) {
      toast.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ");
    } finally {
      setLoadingPhotos(false);
    }
  };

  const loadPairs = async (albumId: string) => {
    try {
      const response = await fetch(`/api/v1/gallery/albums/${albumId}/pairs`, {
        method: "GET",
        headers: {
          Authorization: `Bearer ${token}`,
        },
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–∞—Ä");
      }

      const pairsData = await response.json();
      setPairs(pairsData);
    } catch (error) {
      toast.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –ø–∞—Ä");
    }
  };

  const handleUploadPhoto = async (
    file: File,
    index: number,
    type: "before" | "after"
  ) => {
    if (!selectedAlbum) return;

    try {
      console.log(`üîÑ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ '${type}' #${index + 1}`);
      setUploading((prev) => {
        const newState = [...prev];
        newState[type === "before" ? index : index + 3] = true;
        return newState;
      });

      const formData = new FormData();
      formData.append("file", file);
      formData.append("albumId", selectedAlbum.id.toString());
      formData.append(
        "title",
        `${type === "before" ? "–î–æ" : "–ü—ñ—Å–ª—è"} ${index + 1}`
      );
      formData.append(
        "description",
        `–§–æ—Ç–æ ${type === "before" ? "–¥–æ" : "–ø—ñ—Å–ª—è"} —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó ${index + 1}`
      );
      formData.append("tag", type);

      const uploadResponse = await fetch("/api/v1/upload/photo", {
        method: "POST",
        headers: {
          Authorization: `Bearer ${token}`,
        },
        body: formData,
      });

      if (!uploadResponse.ok) {
        const errorData = await uploadResponse.json();
        throw new Error(errorData.error || "–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è");
      }

      const photoData = await uploadResponse.json();
      console.log("‚úÖ –§–æ—Ç–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ:", photoData);

      // –î–æ–¥–∞—î–º–æ —Ñ–æ—Ç–æ –¥–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ–≥–æ –º–∞—Å–∏–≤—É
      if (type === "before") {
        setBeforePhotos((prev) => [...prev, photoData]);
      } else {
        setAfterPhotos((prev) => [...prev, photoData]);
      }

      toast.success(
        `–§–æ—Ç–æ '${type === "before" ? "–î–æ" : "–ü—ñ—Å–ª—è"}' #${index + 1} –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ`
      );
    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ:", error);
      toast.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ");
    } finally {
      setUploading((prev) => {
        const newState = [...prev];
        newState[type === "before" ? index : index + 3] = false;
        return newState;
      });
    }
  };

  const handleCreatePair = async () => {
    if (beforePhotos.length !== 3 || afterPhotos.length !== 3) {
      toast.error("–ü–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ä—ñ–≤–Ω–æ 3 —Ñ–æ—Ç–æ '–î–æ' —ñ 3 —Ñ–æ—Ç–æ '–ü—ñ—Å–ª—è'");
      return;
    }

    try {
      const beforePhotoIds = beforePhotos.map((photo) => photo.id);
      const afterPhotoIds = afterPhotos.map((photo) => photo.id);

      const response = await fetch("/api/v1/gallery/pairs", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({
          albumId: selectedAlbum?.id,
          beforePhotos: beforePhotoIds,
          afterPhotos: afterPhotoIds,
          label: "–ù–æ–≤–∞ —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è",
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || "–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ä–∏");
      }

      const pairData = await response.json();
      console.log("‚úÖ –ü–∞—Ä–∞ —Å—Ç–≤–æ—Ä–µ–Ω–∞:", pairData);

      toast.success("–ü–∞—Ä–∞ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞!");

      // –û—á–∏—â–∞—î–º–æ —Ñ–æ—Ç–æ –ø—ñ—Å–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ä–∏
      setBeforePhotos([]);
      setAfterPhotos([]);

      // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –¥–∞–Ω—ñ
      if (selectedAlbum) {
        loadPhotos(selectedAlbum.id.toString());
        loadPairs(selectedAlbum.id.toString());
      }
    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ä–∏:", error);
      toast.error("–ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ä–∏");
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-96">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  if (!isAuthenticated) {
    return (
      <div className="flex items-center justify-center h-96">
        <div className="text-center">
          <h2 className="text-2xl font-bold text-gray-900 mb-4">
            –î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ
          </h2>
          <p className="text-gray-600 mb-4">
            –ë—É–¥—å –ª–∞—Å–∫–∞, —É–≤—ñ–π–¥—ñ—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ —Ü—ñ—î—ó —Å—Ç–æ—Ä—ñ–Ω–∫–∏.
          </p>
          <Button onClick={() => router.push("/login")}>
            –£–≤—ñ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="p-6">
      <div className="mb-6">
        <h1 className="text-3xl font-bold text-gray-900 mb-2">
          –ì–∞–ª–µ—Ä–µ—è "–î–æ/–ü—ñ—Å–ª—è"
        </h1>
        <p className="text-gray-600">
          –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø–æ—Ä—ñ–≤–Ω—è–ª—å–Ω–∏–º–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—è–º–∏ —Ä–µ–∫–æ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π
        </p>
      </div>

      {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è */}
      <div className="mb-6 flex flex-wrap gap-3">
        <Button onClick={() => setShowAddAlbum(true)}>
          <Plus className="h-4 w-4 mr-2" />
          –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞—Ä—É –∑ 6 —Ñ–æ—Ç–æ
        </Button>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–∞—Ä–∏ –∑ 6 —Ñ–æ—Ç–æ */}
      {showAddAlbum && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
          <div className="relative top-10 mx-auto p-5 border w-full max-w-4xl shadow-lg rounded-md bg-white">
            <div className="mt-3">
              <h3 className="text-lg font-medium text-gray-900 mb-4">
                –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞—Ä—É "–î–æ/–ü—ñ—Å–ª—è" –∑ 6 —Ñ–æ—Ç–æ
              </h3>

              <div className="space-y-8">
                {/* 3 —Ñ–æ—Ç–æ "–î–û" */}
                <div>
                  <p className="text-lg font-semibold text-gray-800 mb-4">–î–û</p>
                  <div className="grid grid-cols-3 gap-4">
                    {[0, 1, 2].map((index) => (
                      <div key={index} className="space-y-2">
                        <input
                          type="file"
                          accept="image/*"
                          onChange={(e) => {
                            const file = e.target.files?.[0];
                            if (file) {
                              handleUploadPhoto(file, index, "before");
                            }
                          }}
                          disabled={uploading[index]}
                          className="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100 disabled:opacity-50"
                        />
                        {beforePhotos[index] && (
                          <div className="text-xs text-green-600">
                            ‚úÖ {beforePhotos[index].title}
                          </div>
                        )}
                        {uploading[index] && (
                          <div className="text-xs text-blue-600">
                            ‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...
                          </div>
                        )}
                      </div>
                    ))}
                  </div>
                </div>

                {/* 3 —Ñ–æ—Ç–æ "–ü–Ü–°–õ–Ø" */}
                <div>
                  <p className="text-lg font-semibold text-gray-800 mb-4">
                    –ü–Ü–°–õ–Ø
                  </p>
                  <div className="grid grid-cols-3 gap-4">
                    {[0, 1, 2].map((index) => (
                      <div key={index} className="space-y-2">
                        <input
                          type="file"
                          accept="image/*"
                          onChange={(e) => {
                            const file = e.target.files?.[0];
                            if (file) {
                              handleUploadPhoto(file, index, "after");
                            }
                          }}
                          disabled={uploading[index + 3]}
                          className="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100 disabled:opacity-50"
                        />
                        {afterPhotos[index] && (
                          <div className="text-xs text-green-600">
                            ‚úÖ {afterPhotos[index].title}
                          </div>
                        )}
                        {uploading[index + 3] && (
                          <div className="text-xs text-blue-600">
                            ‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...
                          </div>
                        )}
                      </div>
                    ))}
                  </div>
                </div>

                {/* –°—Ç–∞—Ç—É—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è */}
                <div className="bg-blue-50 p-4 rounded-lg">
                  <h4 className="font-medium text-blue-900 mb-2">
                    –°—Ç–∞—Ç—É—Å –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:
                  </h4>
                  <div className="text-sm text-blue-700">
                    <div>–§–æ—Ç–æ "–î–æ": {beforePhotos.length}/3</div>
                    <div>–§–æ—Ç–æ "–ü—ñ—Å–ª—è": {afterPhotos.length}/3</div>
                    <div className="font-medium mt-2">
                      {beforePhotos.length === 3 && afterPhotos.length === 3
                        ? "‚úÖ –í—Å—ñ —Ñ–æ—Ç–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ! –ú–æ–∂–Ω–∞ —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞—Ä—É."
                        : "‚ö†Ô∏è –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –≤—Å—ñ 6 —Ñ–æ—Ç–æ"}
                    </div>
                  </div>
                </div>

                <div className="flex justify-end space-x-3">
                  <Button
                    type="button"
                    variant="secondary"
                    onClick={() => {
                      setShowAddAlbum(false);
                      setBeforePhotos([]);
                      setAfterPhotos([]);
                    }}
                  >
                    –°–∫–∞—Å—É–≤–∞—Ç–∏
                  </Button>
                  <Button
                    type="button"
                    onClick={handleCreatePair}
                    disabled={
                      beforePhotos.length !== 3 || afterPhotos.length !== 3
                    }
                  >
                    –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞—Ä—É
                  </Button>
                </div>
              </div>
            </div>
          </div>
        </div>
      )}

      {/* –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ */}
      <div className="mt-8">
        <h2 className="text-xl font-semibold text-gray-900 mb-4">
          –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ —Ñ–æ—Ç–æ
        </h2>
        {loadingPhotos ? (
          <div className="flex items-center justify-center h-32">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
          </div>
        ) : photos.length > 0 ? (
          <GroupedPhotos
            photos={photos}
            onDeletePhoto={() => {}}
            showTag={true}
            groupBy={groupBy}
          />
        ) : (
          <div className="text-center py-8 text-gray-500">
            <ImageIcon className="h-12 w-12 mx-auto mb-4 text-gray-400" />
            <p>–ù–µ–º–∞—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö —Ñ–æ—Ç–æ</p>
          </div>
        )}
      </div>
    </div>
  );
}

