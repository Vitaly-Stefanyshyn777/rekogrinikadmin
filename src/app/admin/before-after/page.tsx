"use client";

import { useState, useEffect } from "react";
import Image from "next/image";
import { useAuth } from "@/contexts/AuthContext";
import Toast from "@/components/Toast";
import { useToast } from "@/hooks/useToast";
import ConfirmDialog from "@/components/ConfirmDialog";
import { useConfirm } from "@/hooks/useConfirm";

interface UploadState {
  file: File | null;
  preview: string | null;
  uploading: boolean;
  uploaded: boolean;
  uploadedPhoto?: Photo;
}

interface Photo {
  id: number;
  albumId: number;
  url: string;
  title: string;
  description: string;
  tag: string;
  fileName: string;
  fileSize: number;
  mimeType: string;
  createdAt: string;
  updatedAt: string;
}

interface Collection {
  id: number;
  key: string;
  name: string;
  createdAt: string;
  updatedAt: string;
}

interface Pair {
  id: number;
  key: string;
  beforePhoto: Photo;
  afterPhoto: Photo;
  collectionId: number;
  createdAt: string;
  updatedAt: string;
}

export default function BeforeAfterPage() {
  const { user } = useAuth();
  const { toast, showSuccess, showError, hideToast } = useToast();
  const { confirm, showConfirm, hideConfirm, handleConfirm } = useConfirm();
  const [beforePhotos, setBeforePhotos] = useState<UploadState[]>([
    { file: null, preview: null, uploading: false, uploaded: false },
    { file: null, preview: null, uploading: false, uploaded: false },
    { file: null, preview: null, uploading: false, uploaded: false },
  ]);

  const [afterPhotos, setAfterPhotos] = useState<UploadState[]>([
    { file: null, preview: null, uploading: false, uploaded: false },
    { file: null, preview: null, uploading: false, uploaded: false },
    { file: null, preview: null, uploading: false, uploaded: false },
  ]);

  const [albumId] = useState("3"); // ID –∞–ª—å–±–æ–º—É "–î–æ —ñ –ü—ñ—Å–ª—è"
  const [uploadedPhotos, setUploadedPhotos] = useState<Photo[]>([]);
  const [loadingPhotos, setLoadingPhotos] = useState(true);
  const [collections, setCollections] = useState<Collection[]>([]);
  const [pairs, setPairs] = useState<Pair[]>([]);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ñ–æ—Ç–æ
  const fetchPhotos = async () => {
    try {
      setLoadingPhotos(true);
      const token = localStorage.getItem("authToken");
      console.log(
        "üîë –¢–æ–∫–µ–Ω –∑ localStorage:",
        token ? "–Ñ —Ç–æ–∫–µ–Ω" : "–ù–µ–º–∞—î —Ç–æ–∫–µ–Ω—É"
      );

      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π API —Ä–æ—É—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ñ–æ—Ç–æ –∞–ª—å–±–æ–º—É "–î–æ —ñ –ü—ñ—Å–ª—è"
      const timestamp = Date.now();
      const url = `/api/v1/public/gallery/albums/before-after?t=${timestamp}`;
      console.log("üîç –ó–∞–ø–∏—Ç—É—î–º–æ –¥–∞–Ω—ñ –∑ URL:", url);

      const response = await fetch(url, {
        // –ó–∞–±–æ—Ä–æ–Ω—è—î–º–æ –∫–µ—à, —â–æ–± –æ–¥—Ä–∞–∑—É –±–∞—á–∏—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—ñ –∑–º—ñ–Ω–∏ –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è/–∑–∞–º—ñ–Ω–∏
        cache: "no-store",
        // –ü—É–±–ª—ñ—á–Ω–∏–π –µ–Ω–¥–ø–æ—ó–Ω—Ç –Ω–µ –ø–æ—Ç—Ä–µ–±—É—î –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
      });

      if (!response.ok) {
        throw new Error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö");
      }

      const data = await response.json();
      console.log("üîç –î–∞–Ω—ñ –∑ API –ø—ñ—Å–ª—è –∑–∞–ø–∏—Ç—É:", {
        photos: data.photos?.length || 0,
        collections: data.collections?.length || 0,
        pairs: data.pairs?.length || 0,
        rawData: data,
      });

      // –û–±—Ä–æ–±–ª—è—î–º–æ –¥–∞–Ω—ñ –∑—ñ —Å—Ç–∞—Ä–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
      // –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ñ–æ—Ç–æ, —â–æ–± –ø–æ–∫–∞–∑—É–≤–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ —Ç—ñ, —â–æ –≤—Ö–æ–¥—è—Ç—å –¥–æ –ø–∞—Ä
      const allPhotos: Photo[] = [];
      const photosInPairs = new Set<number>();

      // –°–ø–æ—á–∞—Ç–∫—É –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–∞—Ä–∏
      if (data.pairs && Array.isArray(data.pairs)) {
        data.pairs.forEach((pair: Pair) => {
          if (pair.beforePhoto?.id) {
            photosInPairs.add(pair.beforePhoto.id);
          }
          if (pair.afterPhoto?.id) {
            photosInPairs.add(pair.afterPhoto.id);
          }
        });
      }

      // –î–æ–¥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ñ–æ—Ç–æ, —è–∫—ñ –≤—Ö–æ–¥—è—Ç—å –¥–æ –ø–∞—Ä
      if (data.photos && data.photos.length > 0) {
        data.photos.forEach((photo: Photo) => {
          // –ü–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ñ–æ—Ç–æ, —è–∫—ñ –≤—Ö–æ–¥—è—Ç—å –¥–æ –ø–∞—Ä
          if (photosInPairs.has(photo.id)) {
            allPhotos.push({
              id: photo.id,
              albumId: photo.albumId,
              url: photo.url,
              title: photo.title,
              description: photo.description,
              tag: photo.tag || "before", // –Ø–∫—â–æ tag null, –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ "before"
              fileName: photo.title,
              fileSize: 0,
              mimeType: "image/jpeg",
              createdAt: photo.createdAt,
              updatedAt: photo.updatedAt,
            });
          }
        });
      }

      console.log(
        "üì∏ –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ —Ñ–æ—Ç–æ (—Ç—ñ–ª—å–∫–∏ –∑ –ø–∞—Ä):",
        allPhotos.length,
        "—Ñ–æ—Ç–æ",
        "–∑",
        photosInPairs.size,
        "—É –ø–∞—Ä–∞—Ö"
      );
      setUploadedPhotos(allPhotos);

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∫–æ–ª–µ–∫—Ü—ñ—ó
      console.log("üîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∫–æ–ª–µ–∫—Ü—ñ—ó –∑ API:", {
        hasCollections: !!data.collections,
        collectionsLength: data.collections?.length || 0,
        collectionsType: typeof data.collections,
        rawCollections: data.collections,
      });

      if (data.collections && data.collections.length > 0) {
        // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –∫–æ–ª–µ–∫—Ü—ñ—ó –∑ API —Ñ–æ—Ä–º–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É
        const formattedCollections = data.collections.map(
          (collection: { key: number }) => ({
            id: collection.key, // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ key —è–∫ id
            key: collection.key,
            name: `–ö–æ–ª–µ–∫—Ü—ñ—è ${collection.key}`,
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString(),
          })
        );
        setCollections(formattedCollections);
        console.log(
          "üìÅ –ö–æ–ª–µ–∫—Ü—ñ—ó:",
          formattedCollections.length,
          formattedCollections
        );
      } else {
        setCollections([]);
        console.log("üìÅ –ö–æ–ª–µ–∫—Ü—ñ—ó: 0");
      }

      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–∞—Ä–∏ –¥–ª—è –ø–æ–¥–∞–ª—å—à–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥—É –ø–æ –∫–æ–ª–µ–∫—Ü—ñ—è—Ö
      if (data.pairs && Array.isArray(data.pairs)) {
        console.log("üîó –ü–∞—Ä–∏ –∑ API:", data.pairs.length, data.pairs);
        setPairs(data.pairs);
      } else {
        setPairs([]);
        console.log("üîó –ü–∞—Ä–∏: 0");
      }

      console.log("‚úÖ –°—Ç–∞–Ω –æ–Ω–æ–≤–ª–µ–Ω–æ!");
    } catch (err) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ:", err);
    } finally {
      setLoadingPhotos(false);
    }
  };

  // –ó–º—ñ–Ω–∞ —Ñ–æ—Ç–æ
  const changePhoto = (photoId: number) => {
    // –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Ñ–æ—Ç–æ –∑–∞ ID
    const photo = uploadedPhotos.find((p) => p.id === photoId);
    if (!photo) {
      showError("–§–æ—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!");
      return;
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ input –¥–ª—è –≤–∏–±–æ—Ä—É –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª—É
    const input = document.createElement("input");
    input.type = "file";
    input.accept = "image/*";

    input.onchange = async (e) => {
      const file = (e.target as HTMLInputElement).files?.[0];
      if (!file) return;

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Ä–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É (–º–∞–∫—Å–∏–º—É–º 10MB)
      if (file.size > 10 * 1024 * 1024) {
        showError("–†–æ–∑–º—ñ—Ä —Ñ–∞–π–ª—É –Ω–µ –ø–æ–≤–∏–Ω–µ–Ω –ø–µ—Ä–µ–≤–∏—â—É–≤–∞—Ç–∏ 10MB!");
        return;
      }

      // –ü–æ–∫–∞–∑—É—î–º–æ —Å—Ç–∏–ª—ñ–∑–æ–≤–∞–Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
      showConfirm(
        "–ó–∞–º—ñ–Ω–∞ —Ñ–æ—Ç–æ",
        `–ó–∞–º—ñ–Ω–∏—Ç–∏ —Ñ–æ—Ç–æ "${photo.title}" –Ω–∞ –Ω–æ–≤–µ?`,
        async () => {
          await performPhotoReplacement(photo, file);
        }
      );
    };

    const performPhotoReplacement = async (photo: Photo, file: File) => {
      try {
        console.log("üîÑ –ó–∞–º—ñ–Ω—é—î–º–æ —Ñ–æ—Ç–æ:", photo.title);

        const token = localStorage.getItem("authToken");

        // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –ø–∞—Ä—É, –¥–æ —è–∫–æ—ó –Ω–∞–ª–µ–∂–∏—Ç—å —Ü–µ —Ñ–æ—Ç–æ
        const pairsResponse = await fetch(
          `/api/v1/public/gallery/albums/before-after`
        );

        if (!pairsResponse.ok) {
          throw new Error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö –ø—Ä–æ –ø–∞—Ä–∏");
        }

        const pairsData = await pairsResponse.json();
        const pair = pairsData.pairs.find(
          (p: Pair) =>
            p.beforePhoto.id === photoId || p.afterPhoto.id === photoId
        );

        if (!pair) {
          // –Ø–∫—â–æ –ø–∞—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, —Ü–µ –æ–∑–Ω–∞—á–∞—î —â–æ —Ñ–æ—Ç–æ –Ω–µ –≤—Ö–æ–¥–∏—Ç—å –¥–æ –∫–æ–ª–µ–∫—Ü—ñ—ó
          // –í–∏–¥–∞–ª—è—î–º–æ —Ü–µ —Ñ–æ—Ç–æ –∑—ñ —Å–ø–∏—Å–∫—É —ñ –Ω–µ —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–µ
          console.log(
            "‚ö†Ô∏è –ü–∞—Ä–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ - —Ñ–æ—Ç–æ –Ω–µ –≤—Ö–æ–¥–∏—Ç—å –¥–æ –∫–æ–ª–µ–∫—Ü—ñ—ó, –≤–∏–¥–∞–ª—è—î–º–æ –∑ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è"
          );

          // –í–∏–¥–∞–ª—è—î–º–æ —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ API, —è–∫—â–æ –≤–æ–Ω–æ –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è
          try {
            const deleteResponse = await fetch(`/api/v1/photos?id=${photoId}`, {
              method: "DELETE",
              headers: {
                Authorization: `Bearer ${token}`,
              },
            });

            if (deleteResponse.ok) {
              console.log(`üóëÔ∏è –§–æ—Ç–æ ${photoId} –≤–∏–¥–∞–ª–µ–Ω–æ (–Ω–µ –≤ –ø–∞—Ä—ñ)`);
            }
          } catch (deleteError) {
            console.warn("–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ —Ñ–æ—Ç–æ:", deleteError);
          }

          // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ (—Ñ–æ—Ç–æ –∑–Ω–∏–∫–Ω–µ, –±–æ –Ω–µ –≤—Ö–æ–¥–∏—Ç—å –¥–æ –ø–∞—Ä)
          await fetchPhotos();
          showSuccess("–§–æ—Ç–æ –≤–∏–¥–∞–ª–µ–Ω–æ (–Ω–µ –≤—Ö–æ–¥–∏–ª–æ –¥–æ –∫–æ–ª–µ–∫—Ü—ñ—ó)!");
          return;
        }

        // –í–∏–∑–Ω–∞—á–∞—î–º–æ, —è–∫–µ —Ñ–æ—Ç–æ –∑–∞–º—ñ–Ω—é—î–º–æ (–¥–æ –∞–±–æ –ø—ñ—Å–ª—è)
        const isBeforePhoto = pair.beforePhoto.id === photoId;
        const endpoint = isBeforePhoto
          ? `/api/v1/upload/pairs/${pair.key}/before`
          : `/api/v1/upload/pairs/${pair.key}/after`;

        // –ó–∞–º—ñ–Ω—é—î–º–æ —Ñ–æ—Ç–æ –≤ –ø–∞—Ä—ñ
        const formData = new FormData();
        formData.append("file", file);

        const replaceResponse = await fetch(endpoint, {
          method: "PUT",
          headers: {
            Authorization: `Bearer ${token}`,
          },
          body: formData,
        });

        if (!replaceResponse.ok) {
          throw new Error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–º—ñ–Ω–∏ —Ñ–æ—Ç–æ –≤ –ø–∞—Ä—ñ");
        }

        // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫
        await fetchPhotos();
        showSuccess("–§–æ—Ç–æ —É—Å–ø—ñ—à–Ω–æ –∑–∞–º—ñ–Ω–µ–Ω–æ!");
      } catch (err) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–º—ñ–Ω–∏ —Ñ–æ—Ç–æ:", err);
        showError(err instanceof Error ? err.message : "–ü–æ–º–∏–ª–∫–∞ –∑–∞–º—ñ–Ω–∏ —Ñ–æ—Ç–æ");
      }
    };

    input.click();
  };

  // –í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –∫–æ–ª–µ–∫—Ü—ñ—ó
  const deleteSpecificCollection = async (collectionKey: string) => {
    showConfirm(
      "–í–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–ª–µ–∫—Ü—ñ—ó",
      `–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–ª–µ–∫—Ü—ñ—é ${collectionKey}? –¶—é –¥—ñ—é –Ω–µ–º–æ–∂–ª–∏–≤–æ —Å–∫–∞—Å—É–≤–∞—Ç–∏!`,
      async () => {
        await performCollectionDeletion(collectionKey);
      },
      {
        confirmText: "–í–∏–¥–∞–ª–∏—Ç–∏",
        cancelText: "–°–∫–∞—Å—É–≤–∞—Ç–∏",
        type: "danger",
      }
    );
  };

  const performCollectionDeletion = async (collectionKey: string) => {
    try {
      const token = localStorage.getItem("authToken");

      // Optimistic update: –æ–¥—Ä–∞–∑—É –≤–∏–¥–∞–ª—è—î–º–æ –∫–æ–ª–µ–∫—Ü—ñ—é –∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
      setCollections((prev) =>
        prev.filter((collection) => collection.key !== collectionKey)
      );
      setUploadedPhotos([]);
      setLoadingPhotos(false);
      console.log(
        `üóëÔ∏è Optimistic update: –≤–∏–¥–∞–ª—è—î–º–æ –∫–æ–ª–µ–∫—Ü—ñ—é ${collectionKey} –∑—ñ —Å—Ç–∞–Ω—É`
      );

      const deleteResponse = await fetch(
        `/api/v1/gallery/albums/${albumId}/collections/${collectionKey}?deletePhotos=true`,
        {
          method: "DELETE",
          headers: {
            Authorization: `Bearer ${token}`,
          },
        }
      );

      if (!deleteResponse.ok) {
        // –Ø–∫—â–æ –ø–æ–º–∏–ª–∫–∞, –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –∫–æ–ª–µ–∫—Ü—ñ—é –Ω–∞–∑–∞–¥
        await fetchPhotos();
        throw new Error(`–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–ª–µ–∫—Ü—ñ—ó ${collectionKey}`);
      }

      const result = await deleteResponse.json();
      console.log(`–ö–æ–ª–µ–∫—Ü—ñ—è ${collectionKey} –≤–∏–¥–∞–ª–µ–Ω–∞:`, result);

      // –ü—Ä–∏–º—É—Å–æ–≤–æ –æ–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω—ñ–∑–∞—Ü—ñ—ó –∑ —Å–µ—Ä–≤–µ—Ä–æ–º
      console.log("üîÑ –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–ª–µ–∫—Ü—ñ—ó...");

      // –û—á–∏—â–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω –ø–µ—Ä–µ–¥ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è–º
      setUploadedPhotos([]);
      setCollections([]);

      // –ü—Ä–∏–º—É—Å–æ–≤–æ –æ–Ω–æ–≤–ª—é—î–º–æ UI
      setLoadingPhotos(false);

      await fetchPhotos();
      console.log("‚úÖ –î–∞–Ω—ñ –æ–Ω–æ–≤–ª–µ–Ω–æ –ø—ñ—Å–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–ª–µ–∫—Ü—ñ—ó");
      showSuccess(`–ö–æ–ª–µ–∫—Ü—ñ—è ${collectionKey} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–∞!`);
    } catch (err) {
      console.error("–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–ª–µ–∫—Ü—ñ—ó:", err);
      showError(
        err instanceof Error ? err.message : "–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫–æ–ª–µ–∫—Ü—ñ—ó"
      );
    }
  };

  useEffect(() => {
    if (user) {
      fetchPhotos();
    }
  }, [user, albumId]);

  // –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω –≤ uploadedPhotos
  useEffect(() => {
    console.log("üìä uploadedPhotos –∑–º—ñ–Ω–∏–≤—Å—è:", uploadedPhotos.length, "—Ñ–æ—Ç–æ");
  }, [uploadedPhotos]);

  // –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω –≤ collections
  useEffect(() => {
    console.log(
      "üìÅ collections –∑–º—ñ–Ω–∏–≤—Å—è:",
      collections.length,
      "–∫–æ–ª–µ–∫—Ü—ñ–π",
      collections
    );
  }, [collections]);

  const handleFileChange = (
    e: React.ChangeEvent<HTMLInputElement>,
    index: number,
    type: "before" | "after"
  ) => {
    const file = e.target.files?.[0];
    if (!file) return;

    const preview = URL.createObjectURL(file);

    if (type === "before") {
      setBeforePhotos((prev) =>
        prev.map((photo, i) =>
          i === index
            ? { file, preview, uploading: false, uploaded: false }
            : photo
        )
      );
    } else {
      setAfterPhotos((prev) =>
        prev.map((photo, i) =>
          i === index
            ? { file, preview, uploading: false, uploaded: false }
            : photo
        )
      );
    }
  };

  const uploadPhoto = async (file: File, tag: "before" | "after") => {
    try {
      const authToken = localStorage.getItem("authToken");
      console.log("–¢–æ–∫–µ–Ω –∑ localStorage:", authToken);

      if (!authToken) {
        showError("–ü–æ—Ç—Ä—ñ–±–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è!");
        return null;
      }

      const formData = new FormData();
      formData.append("file", file);
      formData.append("albumId", albumId);
      formData.append("tag", tag);

      console.log("–í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –∑ —Ç–æ–∫–µ–Ω–æ–º:", `Bearer ${authToken}`);

      const response = await fetch("/api/v1/upload/photo", {
        method: "POST",
        headers: {
          Authorization: `Bearer ${authToken}`,
        },
        body: formData,
      });

      console.log("–í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞:", response.status, response.statusText);

      if (response.ok) {
        const result = await response.json();
        console.log("–§–æ—Ç–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ:", result);
        return result;
      } else {
        const errorText = await response.text();
        console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:", response.status, errorText);
        return null;
      }
    } catch (error) {
      console.error("–ü–æ–º–∏–ª–∫–∞:", error);
      return null;
    }
  };

  const uploadAllPhotos = async () => {
    console.log("üöÄ –ü–æ—á–∞—Ç–æ–∫ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ñ–æ—Ç–æ...");
    const allBeforeFiles = beforePhotos.filter((photo) => photo.file);
    const allAfterFiles = afterPhotos.filter((photo) => photo.file);

    console.log("üìÅ –§–∞–π–ª–∏ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è:", {
      before: allBeforeFiles.length,
      after: allAfterFiles.length,
    });

    if (allBeforeFiles.length === 0 && allAfterFiles.length === 0) {
      showError("–°–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª–∏ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è!");
      return;
    }

    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—Å—ñ —Ñ–æ—Ç–æ "–î–æ"
    console.log("üì§ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–æ—Ç–æ '–î–æ'...");
    for (let i = 0; i < allBeforeFiles.length; i++) {
      const photo = allBeforeFiles[i];
      if (photo.file) {
        console.log(
          `üì§ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–æ—Ç–æ "–î–æ" ${i + 1}/${allBeforeFiles.length}`
        );
        const result = await uploadPhoto(photo.file, "before");
        if (result) {
          setBeforePhotos((prev) =>
            prev.map((p, idx) =>
              idx === i
                ? {
                    file: null,
                    preview: null,
                    uploading: false,
                    uploaded: true,
                    uploadedPhoto: result,
                  }
                : p
            )
          );
        }
      }
    }

    // –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≤—Å—ñ —Ñ–æ—Ç–æ "–ü—ñ—Å–ª—è"
    console.log("üì§ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–æ—Ç–æ '–ü—ñ—Å–ª—è'...");
    for (let i = 0; i < allAfterFiles.length; i++) {
      const photo = allAfterFiles[i];
      if (photo.file) {
        console.log(
          `üì§ –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ñ–æ—Ç–æ "–ü—ñ—Å–ª—è" ${i + 1}/${allAfterFiles.length}`
        );
        const result = await uploadPhoto(photo.file, "after");
        if (result) {
          setAfterPhotos((prev) =>
            prev.map((p, idx) =>
              idx === i
                ? {
                    file: null,
                    preview: null,
                    uploading: false,
                    uploaded: true,
                    uploadedPhoto: result,
                  }
                : p
            )
          );
        }
      }
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ñ–æ—Ç–æ
    console.log("üîÑ –û–Ω–æ–≤–ª—é—î–º–æ —Å–ø–∏—Å–æ–∫ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ñ–æ—Ç–æ...");
    await fetchPhotos();
    console.log("‚úÖ –°–ø–∏—Å–æ–∫ —Ñ–æ—Ç–æ –æ–Ω–æ–≤–ª–µ–Ω–æ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ñ–æ—Ç–æ!");
    // –ì–æ—Ç—É—î–º–æ —Å–ª–æ—Ç–∏ –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ—ó –∫–æ–ª–µ–∫—Ü—ñ—ó: –æ—á–∏—â–∞—î–º–æ –ª–æ–∫–∞–ª—å–Ω—ñ —Å—Ç–∞–Ω–∏ —Å–ª–æ—Ç—ñ–≤
    setBeforePhotos([
      { file: null, preview: null, uploading: false, uploaded: false },
      { file: null, preview: null, uploading: false, uploaded: false },
      { file: null, preview: null, uploading: false, uploaded: false },
    ]);
    setAfterPhotos([
      { file: null, preview: null, uploading: false, uploaded: false },
      { file: null, preview: null, uploading: false, uploaded: false },
      { file: null, preview: null, uploading: false, uploaded: false },
    ]);
    showSuccess("–í—Å—ñ —Ñ–æ—Ç–æ —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ!");
  };

  const renderPhotoSlot = (
    photo: UploadState,
    index: number,
    type: "before" | "after"
  ) => (
    <div key={index} className="bg-white rounded-lg shadow p-4">
      <h3 className="text-lg font-medium mb-4 text-black">
        {type === "before" ? "–î–æ" : "–ü—ñ—Å–ª—è"} {index + 1}
        {photo.uploading && (
          <span className="ml-2 text-blue-600">(–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...)</span>
        )}
        {/* –ü—Ä–∏–±—Ä–∞–Ω–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ" –Ω–∞ –≤–∏–º–æ–≥—É */}
      </h3>

      {photo.uploaded && photo.uploadedPhoto ? (
        <div className="mb-4">
          <button
            onClick={() => {
              if (type === "before") {
                setBeforePhotos((prev) =>
                  prev.map((p, i) =>
                    i === index
                      ? {
                          file: null,
                          preview: null,
                          uploading: false,
                          uploaded: false,
                        }
                      : p
                  )
                );
              } else {
                setAfterPhotos((prev) =>
                  prev.map((p, i) =>
                    i === index
                      ? {
                          file: null,
                          preview: null,
                          uploading: false,
                          uploaded: false,
                        }
                      : p
                  )
                );
              }
            }}
            className="mt-2 bg-blue-50 text-blue-700 hover:bg-blue-100 px-3 py-2 rounded text-sm"
          >
            –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —ñ–Ω—à–µ —Ñ–æ—Ç–æ
          </button>
        </div>
      ) : (
        <>
          <div className="mb-4">
            <input
              type="file"
              accept="image/*"
              onChange={(e) => handleFileChange(e, index, type)}
              className="block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100"
              disabled={photo.uploading}
            />
          </div>

          {photo.preview && (
            <div className="mb-4">
              <Image
                src={photo.preview}
                alt="Preview"
                width={400}
                height={192}
                className="w-full h-48 object-cover rounded-lg"
              />
            </div>
          )}

          {/* –ü—Ä–∏–±—Ä–∞–Ω–æ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—É –∫–Ω–æ–ø–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è ‚Äî –∑–∞–ª–∏—à–∞—î–º–æ –ª–∏—à–µ "–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—Å—ñ —Ñ–æ—Ç–æ" */}
        </>
      )}
    </div>
  );

  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <h1 className="text-3xl font-bold text-gray-900 mb-8">
          –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ &quot;–î–æ —ñ –ü—ñ—Å–ª—è&quot;
        </h1>

        {/* –ü—Ä–∏–±—Ä–∞–Ω–æ –ø–æ–ª–µ "ID –∞–ª—å–±–æ–º—É" –∑—ñ —Å—Ç–æ—Ä—ñ–Ω–∫–∏ */}

        {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—Å—ñ—Ö —Ñ–æ—Ç–æ */}
        <div className="bg-white rounded-lg shadow p-6 mb-6">
          <div className="flex flex-col gap-3 md:flex-row md:justify-between md:items-center">
            <div>
              <h2 className="text-xl font-bold text-gray-900">
                –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ &quot;–î–æ —ñ –ü—ñ—Å–ª—è&quot;
              </h2>
              <p className="text-gray-600 mt-1">
                –í–∏–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª–∏ —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —ó—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
              </p>
            </div>
            <button
              onClick={uploadAllPhotos}
              className="bg-green-600 text-white px-6 py-3 rounded-lg hover:bg-green-700 font-medium"
            >
              –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—Å—ñ —Ñ–æ—Ç–æ
            </button>
          </div>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* –§–æ—Ç–æ "–î–æ" */}
          <div>
            <h2 className="text-2xl font-bold text-black mb-6">
              –§–æ—Ç–æ &quot;–î–æ&quot; (3 –æ–±–æ–≤&apos;—è–∑–∫–æ–≤—ñ)
            </h2>
            <div className="space-y-6">
              {beforePhotos.map((photo, index) =>
                renderPhotoSlot(photo, index, "before")
              )}
            </div>
          </div>

          {/* –§–æ—Ç–æ "–ü—ñ—Å–ª—è" */}
          <div>
            <h2 className="text-2xl font-bold text-black mb-6">
              –§–æ—Ç–æ &quot;–ü—ñ—Å–ª—è&quot; (3 –æ–±–æ–≤&apos;—è–∑–∫–æ–≤—ñ)
            </h2>
            <div className="space-y-6">
              {afterPhotos.map((photo, index) =>
                renderPhotoSlot(photo, index, "after")
              )}
            </div>
          </div>
        </div>

        {/* –í—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö —Ñ–æ—Ç–æ */}
        <div className="mt-8">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-2xl font-bold text-gray-900">
              –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—ñ —Ñ–æ—Ç–æ
              {loadingPhotos && (
                <span className="ml-2 text-blue-600">(–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...)</span>
              )}
            </h2>
            {/* –ü—Ä–∏–±—Ä–∞–Ω–æ –≥–ª–æ–±–∞–ª—å–Ω—É –∫–Ω–æ–ø–∫—É –≤–∏–¥–∞–ª–µ–Ω–Ω—è —É—Å—ñ—Ö –∫–æ–ª–µ–∫—Ü—ñ–π */}
          </div>

          {/* –ü—Ä–∏–±—Ä–∞–Ω–æ —Å—Ç–∞—Ä–∏–π —Å–ø–∏—Å–æ–∫ –∫–æ–ª–µ–∫—Ü—ñ–π (—Ç–µ–ø–µ—Ä —Ä–µ–Ω–¥–µ—Ä–∏–º–æ —Ç—ñ–ª—å–∫–∏ –Ω–æ–≤—ñ –±–ª–æ–∫–∏-–∫–æ–ª–µ–∫—Ü—ñ—ó –Ω–∏–∂—á–µ) */}

          {loadingPhotos ? (
            <div className="text-center py-8">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto"></div>
              <p className="mt-2 text-gray-600">–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ñ–æ—Ç–æ...</p>
            </div>
          ) : uploadedPhotos.length === 0 ? (
            <div className="text-center py-8">
              <svg
                className="w-16 h-16 text-gray-400 mx-auto mb-4"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z"
                />
              </svg>
              <h3 className="text-lg font-medium text-gray-900 mb-2">
                –ù–µ–º–∞—î –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö —Ñ–æ—Ç–æ
              </h3>
              <p className="text-gray-600">
                –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ –ø–µ—Ä—à—ñ —Ñ–æ—Ç–æ, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —ó—Ö —Ç—É—Ç
              </p>
            </div>
          ) : (
            <div className="space-y-6">
              {collections.length > 0 ? (
                collections.map((collection) => {
                  const pairsInCollection = pairs.filter(
                    (p) => p.collectionId === collection.id
                  );

                  console.log(`üîç –ö–æ–ª–µ–∫—Ü—ñ—è ${collection.key}:`, {
                    collectionId: collection.id,
                    pairsInCollection: pairsInCollection.length,
                    allPairs: pairs.length,
                  });

                  // –†–æ–∑–∫–ª–∞–¥–∞—î–º–æ —Ñ–æ—Ç–æ –ø–æ —Ä—è–¥–∞—Ö: –≤–µ—Ä—Ö–Ω—ñ–π ‚Äî before, –Ω–∏–∂–Ω—ñ–π ‚Äî after
                  const beforeRow = pairsInCollection
                    .map((p) =>
                      p.beforePhoto ? { ...p.beforePhoto, tag: "before" } : null
                    )
                    .filter(Boolean);
                  const afterRow = pairsInCollection
                    .map((p) =>
                      p.afterPhoto ? { ...p.afterPhoto, tag: "after" } : null
                    )
                    .filter(Boolean);

                  return (
                    <div
                      key={collection.key}
                      className="bg-white border border-gray-200 rounded-xl shadow-sm"
                    >
                      <div className="flex items-center justify-between p-4 border-b">
                        <h4 className="text-lg font-semibold text-gray-900">
                          –ö–æ–ª–µ–∫—Ü—ñ—è {collection.key}
                        </h4>
                        <button
                          onClick={() =>
                            deleteSpecificCollection(collection.key)
                          }
                          className="bg-red-600 text-white px-3 py-1 rounded text-sm hover:bg-red-700"
                        >
                          üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ–ª–µ–∫—Ü—ñ—é
                        </button>
                      </div>

                      <div className="p-4 space-y-6">
                        {/* –í–µ—Ä—Ö–Ω—ñ–π —Ä—è–¥: –î–æ */}
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                          {beforeRow.map(
                            (photo) =>
                              photo && (
                                <div
                                  key={`before-${photo.id}`}
                                  className="bg-white rounded-lg shadow overflow-hidden"
                                >
                                  <div className="aspect-w-16 aspect-h-9">
                                    <Image
                                      src={photo.url}
                                      alt={photo.title || "before"}
                                      width={400}
                                      height={192}
                                      className="w-full h-48 object-cover"
                                    />
                                  </div>
                                  <div className="p-4">
                                    <div className="flex items-center justify-between mb-2">
                                      <span className="px-2 py-1 text-xs font-medium rounded-full bg-blue-100 text-blue-800">
                                        before
                                      </span>
                                      {photo.createdAt && (
                                        <span className="text-xs text-gray-500">
                                          {new Date(
                                            photo.createdAt
                                          ).toLocaleDateString("uk-UA")}
                                        </span>
                                      )}
                                    </div>
                                    <button
                                      onClick={() => changePhoto(photo.id)}
                                      className="w-full bg-blue-600 text-white text-sm py-1 px-3 rounded hover:bg-blue-700"
                                    >
                                      –ó–º—ñ–Ω–∏—Ç–∏ —Ñ–æ—Ç–æ
                                    </button>
                                  </div>
                                </div>
                              )
                          )}
                        </div>

                        {/* –ù–∏–∂–Ω—ñ–π —Ä—è–¥: –ü—ñ—Å–ª—è */}
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                          {afterRow.map(
                            (photo) =>
                              photo && (
                                <div
                                  key={`after-${photo.id}`}
                                  className="bg-white rounded-lg shadow overflow-hidden"
                                >
                                  <div className="aspect-w-16 aspect-h-9">
                                    <Image
                                      src={photo.url}
                                      alt={photo.title || "after"}
                                      width={400}
                                      height={192}
                                      className="w-full h-48 object-cover"
                                    />
                                  </div>
                                  <div className="p-4">
                                    <div className="flex items-center justify-between mb-2">
                                      <span className="px-2 py-1 text-xs font-medium rounded-full bg-green-100 text-green-800">
                                        after
                                      </span>
                                      {photo.createdAt && (
                                        <span className="text-xs text-gray-500">
                                          {new Date(
                                            photo.createdAt
                                          ).toLocaleDateString("uk-UA")}
                                        </span>
                                      )}
                                    </div>
                                    <button
                                      onClick={() => changePhoto(photo.id)}
                                      className="w-full bg-blue-600 text-white text-sm py-1 px-3 rounded hover:bg-blue-700"
                                    >
                                      –ó–º—ñ–Ω–∏—Ç–∏ —Ñ–æ—Ç–æ
                                    </button>
                                  </div>
                                </div>
                              )
                          )}
                        </div>
                      </div>
                    </div>
                  );
                })
              ) : uploadedPhotos.length === 0 ? (
                <div className="text-center py-8">
                  <p className="text-gray-600">
                    –ù–µ–º–∞—î —Ñ–æ—Ç–æ –≤ –∫–æ–ª–µ–∫—Ü—ñ—è—Ö. –ó–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ —Ñ–æ—Ç–æ, —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏
                    –∫–æ–ª–µ–∫—Ü—ñ—é.
                  </p>
                </div>
              ) : null}
            </div>
          )}
        </div>

        <div className="mt-8 p-4 bg-blue-50 rounded-lg">
          <h3 className="text-lg font-medium text-blue-900 mb-2">
            –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó:
          </h3>
          <ul className="text-blue-800 space-y-1">
            <li>‚Ä¢ –í–∏–±–µ—Ä—ñ—Ç—å —Ñ–∞–π–ª –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å–ª–æ—Ç–∞</li>
            {/* –ü—Ä–∏–±—Ä–∞–Ω–æ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—é –ø—Ä–æ —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω—É –∫–Ω–æ–ø–∫—É –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è */}
            <li>
              ‚Ä¢ –û–±–æ–≤&apos;—è–∑–∫–æ–≤–æ –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ 3 —Ñ–æ—Ç–æ &quot;–î–æ&quot; —Ç–∞ 3 —Ñ–æ—Ç–æ
              &quot;–ü—ñ—Å–ª—è&quot;
            </li>
            <li>‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–≤–æ—Ä–∏—Ç—å –ø–∞—Ä–∏ –ø—ñ—Å–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è</li>
            <li>
              ‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –∫–Ω–æ–ø–∫—É &quot;–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤—Å—ñ —Ñ–æ—Ç–æ&quot; –¥–ª—è
              –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
            </li>
          </ul>
        </div>
      </div>

      {/* –°—Ç–∏–ª—ñ–∑–æ–≤–∞–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è */}
      <Toast
        message={toast.message}
        type={toast.type}
        isVisible={toast.isVisible}
        onClose={hideToast}
      />

      {/* –°—Ç–∏–ª—ñ–∑–æ–≤–∞–Ω—ñ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è */}
      <ConfirmDialog
        isOpen={confirm.isOpen}
        title={confirm.title}
        message={confirm.message}
        confirmText={confirm.confirmText}
        cancelText={confirm.cancelText}
        type={confirm.type}
        onConfirm={handleConfirm}
        onCancel={hideConfirm}
      />
    </div>
  );
}
