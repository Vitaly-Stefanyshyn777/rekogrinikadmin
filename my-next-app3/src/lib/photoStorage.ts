// –ì–ª–æ–±–∞–ª—å–Ω–∏–π –º–∞—Å–∏–≤ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∏—Ö —Ñ–æ—Ç–æ
let uploadedPhotos: any[] = [];

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ñ–æ—Ç–æ
export function addPhoto(photo: any) {
  uploadedPhotos.push(photo);
  console.log(`üì∏ –î–æ–¥–∞–Ω–æ –Ω–æ–≤–µ —Ñ–æ—Ç–æ: ${photo.fileName} (ID: ${photo.id})`);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ñ–æ—Ç–æ
export function getAllPhotos() {
  return uploadedPhotos;
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–æ—Ç–æ –∑–∞ ID
export function deletePhotoById(photoId: number) {
  const photoIndex = uploadedPhotos.findIndex((photo) => photo.id === photoId);
  if (photoIndex === -1) {
    return null;
  }
  return uploadedPhotos.splice(photoIndex, 1)[0];
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ–æ—Ç–æ –∑–∞ ID
export function updatePhotoById(photoId: number, updates: Partial<any>) {
  const photoIndex = uploadedPhotos.findIndex((photo) => photo.id === photoId);
  if (photoIndex === -1) {
    return null;
  }

  uploadedPhotos[photoIndex] = {
    ...uploadedPhotos[photoIndex],
    ...updates,
    updatedAt: new Date().toISOString(),
  };

  return uploadedPhotos[photoIndex];
}
