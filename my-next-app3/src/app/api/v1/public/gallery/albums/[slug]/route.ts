import { NextRequest, NextResponse } from "next/server";
import { getAllPhotos } from "@/lib/photoStorage";

// GET - –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–ª—å–±–æ–º –∑–∞ slug –∑ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—î—é
export async function GET(
  request: NextRequest,
  { params }: { params: Promise<{ slug: string }> }
) {
  const { slug } = await params;
  const { searchParams } = new URL(request.url);
  const tag = searchParams.get("tag");

  console.log(
    `üåê GET /api/v1/public/gallery/albums/${slug} - –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–ª—å–±–æ–º—É –∑ —Ñ—ñ–ª—å—Ç—Ä–æ–º: ${
      tag || "–≤—Å—ñ"
    }`
  );

  try {
    const photos = getAllPhotos();

    // –í–∏–∑–Ω–∞—á–∞—î–º–æ albumId –∑–∞ slug
    let albumId: number;
    let albumName: string;
    let albumType: string;

    switch (slug) {
      case "general":
        albumId = 1;
        albumName = "–ó–≤–∏—á–∞–π–Ω–∞ –≥–∞–ª–µ—Ä–µ—è";
        albumType = "GENERAL";
        break;
      case "before-after":
        albumId = 2;
        albumName = "–î–æ —ñ –ü—ñ—Å–ª—è";
        albumType = "BEFORE_AFTER";
        break;
      default:
        // –°–ø—Ä–æ–±—É—î–º–æ –≤–∏—Ç—è–≥—Ç–∏ ID –∑ slug
        const match = slug.match(/album-(\d+)/);
        if (match) {
          albumId = parseInt(match[1]);
          albumName = `–ê–ª—å–±–æ–º ${albumId}`;
          albumType = "GENERAL";
        } else {
          return NextResponse.json(
            { error: "Album not found" },
            { status: 404 }
          );
        }
    }

    // –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Ñ–æ—Ç–æ –ø–æ –∞–ª—å–±–æ–º—É
    let albumPhotos = photos.filter((photo) => photo.albumId === albumId);

    // –î–æ–¥–∞—Ç–∫–æ–≤–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –ø–æ —Ç–µ–≥—É
    if (tag) {
      albumPhotos = albumPhotos.filter((photo) => photo.tag === tag);
    }

    // –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
    const album = {
      id: albumId,
      name: albumName,
      slug: slug,
      type: albumType,
      photoCount: albumPhotos.length,
    };

    // –Ø–∫—â–æ —Ü–µ –∞–ª—å–±–æ–º "–î–æ —ñ –ü—ñ—Å–ª—è", —Å—Ç–≤–æ—Ä—é—î–º–æ –ø–∞—Ä–∏
    const pairs = [];
    let collections = [];

    if (albumType === "BEFORE_AFTER") {
      const beforePhotos = albumPhotos.filter(
        (photo) => photo.tag === "before"
      );
      const afterPhotos = albumPhotos.filter((photo) => photo.tag === "after");

      // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞—Ä–∏ (–ø—Ä–æ—Å—Ç–∏–π –∞–ª–≥–æ—Ä–∏—Ç–º - –ø–æ –ø–æ—Ä—è–¥–∫—É)
      const minLength = Math.min(beforePhotos.length, afterPhotos.length);
      for (let i = 0; i < minLength; i++) {
        pairs.push({
          id: i + 1,
          beforePhoto: beforePhotos[i],
          afterPhoto: afterPhotos[i],
          collectionId: Math.floor(i / 3) + 1, // –ì—Ä—É–ø—É—î–º–æ –ø–æ 3 –ø–∞—Ä–∏ –≤ –∫–æ–ª–µ–∫—Ü—ñ—é
        });
      }

      // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–æ–ª–µ–∫—Ü—ñ—ó
      const collectionsMap = new Map();
      pairs.forEach((pair) => {
        const collectionId = pair.collectionId;
        if (!collectionsMap.has(collectionId)) {
          collectionsMap.set(collectionId, {
            id: collectionId,
            pairs: [],
            count: 0,
          });
        }
        collectionsMap.get(collectionId).pairs.push(pair);
        collectionsMap.get(collectionId).count++;
      });

      collections = Array.from(collectionsMap.values());
    }

    console.log(
      `‚úÖ GET /api/v1/public/gallery/albums/${slug} - –ó–Ω–∞–π–¥–µ–Ω–æ ${albumPhotos.length} —Ñ–æ—Ç–æ`
    );

    return NextResponse.json({
      album,
      photos: albumPhotos,
      pairs: pairs,
      collections: collections,
    });
  } catch (error) {
    console.error(
      `‚ùå GET /api/v1/public/gallery/albums/${slug} - –ü–æ–º–∏–ª–∫–∞:`,
      error
    );
    return NextResponse.json(
      { error: "Failed to fetch album" },
      { status: 500 }
    );
  }
}
