import { NextResponse } from "next/server";
import { getAllPhotos } from "@/lib/photoStorage";

// GET - –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –∞–ª—å–±–æ–º–∏
export async function GET() {
  console.log("üåê GET /api/v1/public/gallery/albums - –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∞–ª—å–±–æ–º—ñ–≤");

  try {
    const photos = getAllPhotos();

    // –ì—Ä—É–ø—É—î–º–æ —Ñ–æ—Ç–æ –ø–æ –∞–ª—å–±–æ–º–∞—Ö
    const albumsMap = new Map();

    photos.forEach((photo) => {
      const albumId = photo.albumId;
      if (!albumsMap.has(albumId)) {
        albumsMap.set(albumId, {
          id: albumId,
          name:
            albumId === 1
              ? "–ó–≤–∏—á–∞–π–Ω–∞ –≥–∞–ª–µ—Ä–µ—è"
              : albumId === 2
              ? "–î–æ —ñ –ü—ñ—Å–ª—è"
              : `–ê–ª—å–±–æ–º ${albumId}`,
          slug:
            albumId === 1
              ? "general"
              : albumId === 2
              ? "before-after"
              : `album-${albumId}`,
          type: albumId === 2 ? "BEFORE_AFTER" : "GENERAL",
          photoCount: 0,
          createdAt: photo.createdAt,
        });
      }

      albumsMap.get(albumId).photoCount++;
    });

    const albums = Array.from(albumsMap.values());

    console.log(
      `‚úÖ GET /api/v1/public/gallery/albums - –ó–Ω–∞–π–¥–µ–Ω–æ ${albums.length} –∞–ª—å–±–æ–º—ñ–≤`
    );

    return NextResponse.json({
      albums,
      total: albums.length,
    });
  } catch (error) {
    console.error("‚ùå GET /api/v1/public/gallery/albums - –ü–æ–º–∏–ª–∫–∞:", error);
    return NextResponse.json(
      { error: "Failed to fetch albums" },
      { status: 500 }
    );
  }
}
