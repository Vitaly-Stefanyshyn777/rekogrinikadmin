import { NextRequest, NextResponse } from "next/server";
import {
  getAllPhotos,
  deletePhotoById,
  updatePhotoById,
} from "@/lib/photoStorage";

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó
function checkAuth(request: NextRequest) {
  const authHeader = request.headers.get("authorization");
  if (!authHeader || !authHeader.startsWith("Bearer ")) {
    return false;
  }
  const token = authHeader.substring(7);
  // –¢—É—Ç –º–∞—î –±—É—Ç–∏ —Ä–µ–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ JWT —Ç–æ–∫–µ–Ω–∞
  return token.length > 0;
}

// GET - –æ—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Ñ–æ—Ç–æ
export async function GET(request: NextRequest) {
  console.log("üîç GET /api/v1/photos - –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö —Ñ–æ—Ç–æ");

  if (!checkAuth(request)) {
    console.log("‚ùå GET /api/v1/photos - Unauthorized");
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }

  const photos = getAllPhotos();
  console.log(`‚úÖ GET /api/v1/photos - –ó–Ω–∞–π–¥–µ–Ω–æ ${photos.length} —Ñ–æ—Ç–æ`);
  return NextResponse.json({
    photos,
    total: photos.length,
  });
}

// DELETE - –≤–∏–¥–∞–ª–∏—Ç–∏ —Ñ–æ—Ç–æ –∑–∞ ID
export async function DELETE(request: NextRequest) {
  console.log("üóëÔ∏è DELETE /api/v1/photos - –í–∏–¥–∞–ª–µ–Ω–Ω—è —Ñ–æ—Ç–æ");

  if (!checkAuth(request)) {
    console.log("‚ùå DELETE /api/v1/photos - Unauthorized");
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }

  const { searchParams } = new URL(request.url);
  const photoId = searchParams.get("id");

  if (!photoId) {
    return NextResponse.json(
      { error: "Photo ID is required" },
      { status: 400 }
    );
  }

  const deletedPhoto = deletePhotoById(parseInt(photoId));
  if (!deletedPhoto) {
    return NextResponse.json({ error: "Photo not found" }, { status: 404 });
  }

  console.log(`‚úÖ DELETE /api/v1/photos - –í–∏–¥–∞–ª–µ–Ω–æ —Ñ–æ—Ç–æ ${photoId}`);

  return NextResponse.json({
    message: "Photo deleted successfully",
    deletedPhoto,
  });
}

// PUT - –æ–Ω–æ–≤–∏—Ç–∏ –º–µ—Ç–∞–¥–∞–Ω—ñ —Ñ–æ—Ç–æ
export async function PUT(request: NextRequest) {
  console.log("‚úèÔ∏è PUT /api/v1/photos - –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ–æ—Ç–æ");

  if (!checkAuth(request)) {
    console.log("‚ùå PUT /api/v1/photos - Unauthorized");
    return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
  }

  const body = await request.json();
  const { id, title, description, tag } = body;

  if (!id) {
    return NextResponse.json(
      { error: "Photo ID is required" },
      { status: 400 }
    );
  }

  const updatedPhoto = updatePhotoById(id, {
    title,
    description,
    tag,
  });

  if (!updatedPhoto) {
    return NextResponse.json({ error: "Photo not found" }, { status: 404 });
  }

  console.log(`‚úÖ PUT /api/v1/photos - –û–Ω–æ–≤–ª–µ–Ω–æ —Ñ–æ—Ç–æ ${id}`);

  return NextResponse.json({
    message: "Photo updated successfully",
    photo: updatedPhoto,
  });
}
